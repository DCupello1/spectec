;;
;; Numerics
;;

;; Signed numbers

def $signed(N, nat) : int       hint(show $signed_(%,%))
def $signed(N, i) = i           -- if $(0 <= 2^(N-1))
def $signed(N, i) = $(i - 2^N)  -- if $(2^(N-1) <= i < 2^N)

def $invsigned(N, int) : nat    hint(show $signed_(%)^(-1)#((%)))
def $invsigned(N, ii) = j       -- if $signed(N, j) = ii


;; TODO

def $unop(valtype, unop_(valtype), val_(valtype)) : val_(valtype)*
    hint(show %2#$_(%1)#((%3)))
def $binop(valtype, binop_(valtype), val_(valtype), val_(valtype)) : val_(valtype)*
    hint(show %2#$_(%1)#(%3, %4))
def $testop(valtype, testop_(valtype), val_(valtype)) : val_(I32)
    hint(show %2#$_(%1)#((%3)))
def $relop(valtype, relop_(valtype), val_(valtype), val_(valtype)) : val_(I32)
    hint(show %2#$_(%1)#(%3, %4))
def $cvtop(valtype_1, valtype_2, cvtop, sx?, val_(valtype_1)) : val_(valtype_2)*
    hint(show %3#$_((%1,%2))^(%4)#((%5)))

def $wrap(M, N, iN(M)) : iN(N)                      hint(show $wrap_((%,%))#((%)))
def $ext(M, N, sx, iN(M)) : iN(N)                   hint(show $ext_((%,%))^(%)#((%)))
def $trunc(M, N, sx, fN(M)) : iN(N)                 hint(show $trunc_((%,%))^(%)#((%)))
def $demote(M, N, fN(M)) : fN(N)                    hint(show $demote_((%,%))#((%)))
def $promote(M, N, fN(M)) : fN(N)                   hint(show $promote_((%,%))#((%)))
def $convert(M, N, sx, iN(M)) : fN(N)               hint(show $convert_((%,%))^(%)#((%)))
def $reinterpret(valtype_1, valtype_2, val_(valtype_1)) : val_(valtype_2)
    hint(show $narrow_((%,%))#(%))

def $ibytes(N, iN(N)) : byte*                       hint(show $bytes_(I#%,%))
def $fbytes(N, fN(N)) : byte*                       hint(show $bytes_(F#%,%))
def $bytes(valtype, val_(valtype)) : byte*          hint(show $bytes_(%,%))

def $invibytes(N, byte*) : iN(N)
def $invfbytes(N, byte*) : fN(N)

def $invibytes(N, b*) = n  -- if $ibytes(N, n) = b*
def $invfbytes(N, b*) = p  -- if $fbytes(N, p) = b*

def $iadd(N, iN(N), iN(N)) : iN(N)      hint(show $iadd_(%,%,%))
def $isub(N, iN(N), iN(N)) : iN(N)      hint(show $isub_(%,%,%))
def $imul(N, iN(N), iN(N)) : iN(N)      hint(show $imul_(%,%,%))
def $idiv(N, sx, iN(N), iN(N)) : iN(N)  hint(show $idiv_(%)^(%)#((%,%)))
def $irem(N, sx, iN(N), iN(N)) : iN(N)  hint(show $irem_(%)^(%)#((%,%)))
def $inot(N, iN(N)) : iN(N)             hint(show $inot_(%,%))
def $iand(N, iN(N), iN(N)) : iN(N)      hint(show $iand_(%,%,%))
def $ior(N, iN(N), iN(N)) : iN(N)       hint(show $ior_(%,%,%))
def $ixor(N, iN(N), iN(N)) : iN(N)      hint(show $ixor_(%,%,%))
def $ishl(N, iN(N), u32) : iN(N)        hint(show $ishl_(%,%,%))
def $ishr(N, sx, iN(N), u32) : iN(N)    hint(show $ishr_(%)^(%)#((%,%)))
def $irotl(N, iN(N), iN(N)) : iN(N)     hint(show $irotl_(%,%,%))
def $irotr(N, iN(N), iN(N)) : iN(N)     hint(show $irotr_(%,%,%))
def $iclz(N, iN(N)) : iN(N)             hint(show $iclz_(%,%))
def $ictz(N, iN(N)) : iN(N)             hint(show $iclz_(%,%))
def $ipopcnt(N, iN(N)) : iN(N)          hint(show $ipopcnt_(%,%))
def $ieqz(N, iN(N)) : u32               hint(show $ieqz_(%,%))
def $ieq(N, iN(N), iN(N)) : u32         hint(show $ieq_(%,%,%))
def $ine(N, iN(N), iN(N)) : u32         hint(show $ine_(%,%,%))
def $ilt(N, sx, iN(N), iN(N)) : u32     hint(show $ilt_(%)^(%)#((%,%)))
def $igt(N, sx, iN(N), iN(N)) : u32     hint(show $igt_(%)^(%)#((%,%)))
def $ile(N, sx, iN(N), iN(N)) : u32     hint(show $ile_(%)^(%)#((%,%)))
def $ige(N, sx, iN(N), iN(N)) : u32     hint(show $ige_(%)^(%)#((%,%)))

def $fadd(N, fN(N), fN(N)) : fN(N)      hint(show $fadd_(%,%,%))
def $fsub(N, fN(N), fN(N)) : fN(N)      hint(show $fsub_(%,%,%))
def $fmul(N, fN(N), fN(N)) : fN(N)      hint(show $fmul_(%,%,%))
def $fdiv(N, fN(N), fN(N)) : fN(N)      hint(show $fdiv_(%,%,%))
def $fmin(N, fN(N), fN(N)) : fN(N)      hint(show $fmin_(%,%,%))
def $fmax(N, fN(N), fN(N)) : fN(N)      hint(show $fmax_(%,%,%))
def $fcopysign(N, fN(N), fN(N)) : fN(N) hint(show $fcopysign_(%,%,%))
def $fabs(N, fN(N)) : fN(N)             hint(show $fabs_(%,%))
def $fneg(N, fN(N)) : fN(N)             hint(show $fneg_(%,%))
def $fsqrt(N, fN(N)) : fN(N)            hint(show $fsqrt_(%,%))
def $fceil(N, fN(N)) : fN(N)            hint(show $fceil_(%,%))
def $ffloor(N, fN(N)) : fN(N)           hint(show $ffloor_(%,%))
def $ftrunc(N, fN(N)) : fN(N)           hint(show $ftrunc_(%,%))
def $fnearest(N, fN(N)) : fN(N)         hint(show $fnearest_(%,%))
def $feq(N, fN(N), fN(N)) : u32         hint(show $feq_(%,%,%))
def $fne(N, fN(N), fN(N)) : u32         hint(show $fne_(%,%,%))
def $flt(N, fN(N), fN(N)) : u32         hint(show $flt_(%,%,%))
def $fgt(N, fN(N), fN(N)) : u32         hint(show $fgt_(%,%,%))
def $fle(N, fN(N), fN(N)) : u32         hint(show $fle_(%,%,%))
def $fge(N, fN(N), fN(N)) : u32         hint(show $fge_(%,%,%))


def $binop(Inn, ADD, iN_1, iN_2) = $iadd($size(Inn), iN_1, iN_2)
def $binop(Inn, SUB, iN_1, iN_2) = $isub($size(Inn), iN_1, iN_2)
def $binop(Inn, MUL, iN_1, iN_2) = $imul($size(Inn), iN_1, iN_2)
def $binop(Inn, DIV sx, iN_1, iN_2) = $idiv($size(Inn), sx, iN_1, iN_2)
def $binop(Inn, REM sx, iN_1, iN_2) = $irem($size(Inn), sx, iN_1, iN_2)
def $binop(Inn, AND, iN_1, iN_2) = $iand($size(Inn), iN_1, iN_2)
def $binop(Inn, OR, iN_1, iN_2) = $ior($size(Inn), iN_1, iN_2)
def $binop(Inn, XOR, iN_1, iN_2) = $ixor($size(Inn), iN_1, iN_2)
def $binop(Inn, SHL, iN_1, iN_2) = $ishl($size(Inn), iN_1, iN_2)
def $binop(Inn, SHR sx, iN_1, iN_2) = $ishr($size(Inn), sx, iN_1, iN_2)
def $binop(Inn, ROTL, iN_1, iN_2) = $irotl($size(Inn), iN_1, iN_2)
def $binop(Inn, ROTR, iN_1, iN_2) = $irotr($size(Inn), iN_1, iN_2)
def $unop(Inn, CLZ, iN) = $iclz($size(Inn), iN)
def $unop(Inn, CTZ, iN) = $ictz($size(Inn), iN)
def $unop(Inn, POPCNT, iN) = $ipopcnt($size(Inn), iN)
def $testop(Inn, EQZ, iN) = $ieqz($size(Inn), iN)
def $relop(Inn, EQ, iN_1, iN_2) = $ieq($size(Inn), iN_1, iN_2)
def $relop(Inn, NE, iN_1, iN_2) = $ine($size(Inn), iN_1, iN_2)
def $relop(Inn, LT sx, iN_1, iN_2) = $ilt($size(Inn), sx, iN_1, iN_2)
def $relop(Inn, GT sx, iN_1, iN_2) = $igt($size(Inn), sx, iN_1, iN_2)
def $relop(Inn, LE sx, iN_1, iN_2) = $ile($size(Inn), sx, iN_1, iN_2)
def $relop(Inn, GE sx, iN_1, iN_2) = $ige($size(Inn), sx, iN_1, iN_2)

def $binop(Fnn, ADD, fN_1, fN_2) = $fadd($size(Fnn), fN_1, fN_2)
def $binop(Fnn, SUB, fN_1, fN_2) = $fsub($size(Fnn), fN_1, fN_2)
def $binop(Fnn, MUL, fN_1, fN_2) = $fmul($size(Fnn), fN_1, fN_2)
def $binop(Fnn, DIV, fN_1, fN_2) = $fdiv($size(Fnn), fN_1, fN_2)
def $binop(Fnn, MIN, fN_1, fN_2) = $fmin($size(Fnn), fN_1, fN_2)
def $binop(Fnn, MAX, fN_1, fN_2) = $fmax($size(Fnn), fN_1, fN_2)
def $binop(Fnn, COPYSIGN, fN_1, fN_2) = $fcopysign($size(Fnn), fN_1, fN_2)

def $unop(Fnn, ABS, fN) = $fabs($size(Fnn), fN)
def $unop(Fnn, NEG, fN) = $fneg($size(Fnn), fN)
def $unop(Fnn, SQRT, fN) = $fsqrt($size(Fnn), fN)
def $unop(Fnn, CEIL, fN) = $fceil($size(Fnn), fN)
def $unop(Fnn, FLOOR, fN) = $ffloor($size(Fnn), fN)
def $unop(Fnn, TRUNC, fN) = $ftrunc($size(Fnn), fN)
def $unop(Fnn, NEAREST, fN) = $fnearest($size(Fnn), fN)

def $relop(Fnn, EQ, fN_1, fN_2) = $feq($size(Fnn), fN_1, fN_2)
def $relop(Fnn, NE, fN_1, fN_2) = $fne($size(Fnn), fN_1, fN_2)
def $relop(Fnn, LT, fN_1, fN_2) = $flt($size(Fnn), fN_1, fN_2)
def $relop(Fnn, GT, fN_1, fN_2) = $fgt($size(Fnn), fN_1, fN_2)
def $relop(Fnn, LE, fN_1, fN_2) = $fle($size(Fnn), fN_1, fN_2)
def $relop(Fnn, GE, fN_1, fN_2) = $fge($size(Fnn), fN_1, fN_2)

def $cvtop(I32, I64, CONVERT, sx, iN) = $ext(32, 64, sx, iN)
def $cvtop(I64, I32, CONVERT, sx?, iN) = $wrap(64, 32, iN)
def $cvtop(Fnn, Inn, CONVERT, sx, fN) = $trunc($size(Fnn), $size(Inn), sx, fN)
def $cvtop(F32, F64, CONVERT, sx?, fN) = $promote(32, 64, fN)
def $cvtop(F64, F32, CONVERT, sx?, fN) = $demote(64, 32, fN)
def $cvtop(Inn, Fnn, CONVERT, sx, iN) = $convert($size(Inn), $size(Fnn), sx, iN)
def $cvtop(Inn, Fnn, REINTERPRET, sx?, iN) = $reinterpret(Inn, Fnn, iN) -- if $size(Inn) = $size(Fnn)
def $cvtop(Fnn, Inn, REINTERPRET, sx?, fN) = $reinterpret(Fnn, Inn, fN) -- if $size(Inn) = $size(Fnn)