;;
;; Allocation
;;

;; Definitions

def $alloctypes(type*) : deftype* hint(show $alloctype*#((%)))
def $alloctypes(eps) = eps
def $alloctypes(type'* type) = deftype'* deftype*
  -- if deftype'* = $alloctypes(type'*)
  -- if type = TYPE rectype
  -- if deftype* = $subst_all_deftypes($rolldt(x, rectype), deftype'*)
  -- if x = |deftype'*|

def $allocfunc(store, deftype, funccode, moduleinst) : (store, funcaddr)
def $allocfunc(s, deftype, funccode, moduleinst) = (s ++ {FUNCS funcinst}, |s.FUNCS|)
  ---- ----
  -- if funcinst = { TYPE deftype, MODULE moduleinst, CODE funccode }

def $allocfuncs(store, deftype*, funccode*, moduleinst*) : (store, funcaddr*) hint(show $allocfunc*#((%,%,%,%)))
def $allocfuncs(s, eps, eps, eps) = (s, eps)
def $allocfuncs(s, dt dt'*, funccode funccode'*, mm mm'*) = (s_2, fa fa'*)
  -- if (s_1, fa) = $allocfunc(s, dt, funccode, mm)
  -- if (s_2, fa'*) = $allocfuncs(s_1, dt'*, funccode'*, mm'*)

def $allocglobal(store, globaltype, val) : (store, globaladdr)
def $allocglobal(s, globaltype, val) = (s ++ {GLOBALS globalinst}, |s.GLOBALS|)
  ---- ----
  -- if globalinst = { TYPE globaltype, VALUE val }

def $allocglobals(store, globaltype*, val*) : (store, globaladdr*) hint(show $allocglobal*#((%,%,%)))
def $allocglobals(s, eps, eps) = (s, eps)
def $allocglobals(s, globaltype globaltype'*, val val'*) = (s_2, ga ga'*)
  -- if (s_1, ga) = $allocglobal(s, globaltype, val)
  -- if (s_2, ga'*) = $allocglobals(s_1, globaltype'*, val'*)

def $alloctable(store, tabletype, ref) : (store, tableaddr)
def $alloctable(s, `[i .. j] rt, ref) = (s ++ {TABLES tableinst}, |s.TABLES|)
  ---- ----
  -- if tableinst = { TYPE (`[i .. j] rt), REFS ref^i }

def $alloctables(store, tabletype*, ref*) : (store, tableaddr*) hint(show $alloctable*#((%,%,%)))
def $alloctables(s, eps, eps) = (s, eps)
def $alloctables(s, tabletype tabletype'*, ref ref'*) = (s_2, ta ta'*)
  -- if (s_1, ta) = $alloctable(s, tabletype, ref)
  -- if (s_2, ta'*) = $alloctables(s_1, tabletype'*, ref'*)

def $allocmem(store, memtype) : (store, memaddr)
def $allocmem(s, `[i .. j] PAGE) = (s ++ {MEMS meminst}, |s.MEMS|)
  ---- ----
  -- if meminst = { TYPE (`[i .. j] PAGE), BYTES (0x00)^(i * $($(64 * $Ki))) }

def $allocmems(store, memtype*) : (store, memaddr*) hint(show $allocmem*#((%,%)))
def $allocmems(s, eps) = (s, eps)
def $allocmems(s, memtype memtype'*) = (s_2, ma ma'*)
  -- if (s_1, ma) = $allocmem(s, memtype)
  -- if (s_2, ma'*) = $allocmems(s_1, memtype'*)

def $allocelem(store, elemtype, ref*) : (store, elemaddr)
def $allocelem(s, elemtype, ref*) = (s ++ {ELEMS eleminst}, |s.ELEMS|)
  ---- ----
  -- if eleminst = { TYPE elemtype, REFS ref* }

def $allocelems(store, elemtype*, (ref*)*) : (store, elemaddr*) hint(show $allocelem*#((%,%,%)))
def $allocelems(s, eps, eps) = (s, eps)
def $allocelems(s, rt rt'*, (ref*) (ref'*)*) = (s_2, ea ea'*)
  -- if (s_1, ea) = $allocelem(s, rt, ref*)
  -- if (s_2, ea'*) = $allocelems(s_2, rt'*, (ref'*)*)

def $allocdata(store, datatype, byte*) : (store, dataaddr)
def $allocdata(s, OK, byte*) = (s ++ {DATAS datainst}, |s.DATAS|)
  ---- ----
  -- if datainst = { BYTES byte* }

def $allocdatas(store, datatype*, (byte*)*) : (store, dataaddr*) hint(show $allocdata*#((%,%,%)))
def $allocdatas(s, eps, eps) = (s, eps)
def $allocdatas(s, ok ok'*, (b*) (b'*)*) = (s_2, da da'*)
  -- if (s_1, da) = $allocdata(s, ok, b*)
  -- if (s_2, da'*) = $allocdatas(s_1, ok'*, (b'*)*)

def $allocexport(moduleinst, export) : exportinst hint(show $allocexport(moduleinst, %2))  ;; HACK !
def $allocexport(moduleinst, EXPORT name (FUNC x)) = { NAME name, VALUE (FUNC moduleinst.FUNCS[x]) }
def $allocexport(moduleinst, EXPORT name (GLOBAL x)) = { NAME name, VALUE (GLOBAL moduleinst.GLOBALS[x]) }
def $allocexport(moduleinst, EXPORT name (TABLE x)) = { NAME name, VALUE (TABLE moduleinst.TABLES[x]) }
def $allocexport(moduleinst, EXPORT name (MEM x)) = { NAME name, VALUE (MEM moduleinst.MEMS[x]) }

def $allocexports(moduleinst, export*) : exportinst* hint(show $allocexport*#(%,%))
def $allocexports(moduleinst, export*) = $allocexport(moduleinst, export)*


;; Modules

def $allocmodule(store, module, externval*, val*, ref*, (ref*)*) : (store, moduleinst)
def $allocmodule(s, module, externval*, val_G*, ref_T*, (ref_E*)*) = (s_6, moduleinst)
  ---- ----
  -- if module = MODULE type* import* func* global* table* mem* elem* data* start? export*
  -- if func* = (FUNC x local* expr_F)*
  -- if global* = (GLOBAL globaltype expr_G)*
  -- if table* = (TABLE tabletype expr_T)*
  -- if mem* = (MEMORY memtype)*
  -- if elem* = (ELEM elemtype expr_E* elemmode)*
  -- if data* = (DATA byte* datamode)*
  ;; TODO: inline these
  -- if fa_I* = $funcsxv(externval*)
  -- if ga_I* = $globalsxv(externval*)
  -- if ta_I* = $tablesxv(externval*)
  -- if ma_I* = $memsxv(externval*)
  ;; TODO: get rid of these
  -- if fa* = ($(|s.FUNCS|+i_F))^(i_F<|func*|)
  -- if ga* = ($(|s.GLOBALS|+i_G))^(i_G<|global*|)
  -- if ta* = ($(|s.TABLES|+i_T))^(i_T<|table*|)
  -- if ma* = ($(|s.MEMS|+i_M))^(i_M<|mem*|)
  -- if ea* = ($(|s.ELEMS|+i_E))^(i_E<|elem*|)
  -- if da* = ($(|s.DATAS|+i_D))^(i_D<|data*|)
  -- if dt* = $alloctypes(type*)
  -- if (s_1, fa*) = $allocfuncs(s, dt*[x]*, (FUNC x local* expr_F)*, moduleinst^(|func*|))
  -- if (s_2, ga*) = $allocglobals(s_1, globaltype*, val_G*)
  -- if (s_3, ta*) = $alloctables(s_2, tabletype*, ref_T*)
  -- if (s_4, ma*) = $allocmems(s_3, memtype*)
  -- if (s_5, ea*) = $allocelems(s_4, elemtype*, (ref_E*)*)
  -- if (s_6, da*) = $allocdatas(s_5, OK^(|data*|), (byte*)*)
  ;; TODO: use moduleinst here and remove hack above
  -- if xi* = $allocexports({FUNCS fa_I* fa*, GLOBALS ga_I* ga*, TABLES ta_I* ta*, MEMS ma_I* ma*}, export*)
  -- if moduleinst = {
      TYPES dt*,
      FUNCS fa_I* fa*, \
      GLOBALS ga_I* ga*,
      TABLES ta_I* ta*, \
      MEMS ma_I* ma*,
      ELEMS ea*, \
      DATAS da*,
      EXPORTS xi*
    }


;;
;; Instantiation
;;

def $runelem_(elemidx, elem) : instr*
def $runelem_(x, ELEM rt e^n (PASSIVE)) = eps
def $runelem_(x, ELEM rt e^n (DECLARE)) = (ELEM.DROP x)
def $runelem_(x, ELEM rt e^n (ACTIVE y instr*)) =
  instr* (CONST I32 0) (CONST I32 n) (TABLE.INIT y x) (ELEM.DROP x)

def $rundata_(dataidx, data) : instr*
def $rundata_(x, DATA b^n (PASSIVE)) = eps
def $rundata_(x, DATA b^n (ACTIVE y instr*)) =
  instr* (CONST I32 0) (CONST I32 n) (MEMORY.INIT y x) (DATA.DROP x)

def $instantiate(store, module, externval*) : config
def $instantiate(s, module, externval*) = s'; f; instr_E* instr_D* (CALL x)?
  ---- ----
  ;; TODO: -- Module_ok: |- module : xt_I* -> xt_E*
  ;; TODO: -- (Externval_type: s |- externval : xt_I)*
  ----
  -- if module = MODULE type* import* func* global* table* mem* elem* data* start? export*
  -- if global* = (GLOBAL globaltype expr_G)*
  -- if table* = (TABLE tabletype expr_T)*
  -- if elem* = (ELEM reftype expr_E* elemmode)*
  -- if data* = (DATA byte* datamode)*
  -- if start? = (START x)?
  ;; TODO: avoid this HACK and use mm directly, or built it fully incrementally
  -- if moduleinst_0 = {
      TYPES $alloctypes(type*),
      FUNCS $funcsxv(externval*) ($(|s.FUNCS|+i_F))^(i_F<|func*|),
      GLOBALS $globalsxv(externval*), \
    }
  -- if z = s; {MODULE moduleinst_0}  ;; TODO: inline
  -- (Eval_expr : z; expr_G ~>* z; val_G)*
  -- (Eval_expr : z; expr_T ~>* z; ref_T)*
  -- (Eval_expr : z; expr_E ~>* z; ref_E)**
  ;; TODO: rename mm to moduleinst (causes stack overflow in interpreter!)
  -- if (s', mm) = $allocmodule(s, module, externval*, val_G*, ref_T*, (ref_E*)*)
  -- if f = {MODULE mm}  ;; TODO: inline
  -- if instr_E* = $concat_(instr, $runelem_(i_E, elem*[i_E])^(i_E<|elem*|))
  -- if instr_D* = $concat_(instr, $rundata_(i_D, data*[i_D])^(i_D<|data*|))
  ;;-- if instr_S? = (CALL x)?  ;; TODO: use above


;;
;; Invocation
;;

def $invoke(store, funcaddr, val*) : config
def $invoke(s, funcaddr, val*) = s; f; val* (REF.FUNC_ADDR funcaddr) (CALL_REF s.FUNCS[funcaddr].TYPE)
  ---- ----
  -- Expand: s.FUNCS[funcaddr].TYPE ~~ FUNC (t_1* -> t_2*)
  ;; TODO: -- (Val_type: s |- val : t_1)*
  -- if f = {MODULE {}}  ;; TODO: inline
