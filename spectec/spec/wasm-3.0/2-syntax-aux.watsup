;;
;; Auxiliary definitions on Indices
;;

;; Sequence difference

def $setminus(idx*, idx*) : idx*  hint(show %\%)
def $setminus1(idx, idx*) : idx*

def $setminus(eps, y*) = eps
def $setminus(x_1 x*, y*) = $setminus1(x_1, y*) $setminus(x*, y*)

def $setminus1(x, eps) = x
def $setminus1(x, y_1 y*) = eps                -- if x = y_1
def $setminus1(x, y_1 y*) = $setminus1(x, y*)  -- otherwise


;; Free indices

def $dataidx_instr(instr) : dataidx*  hint(show $dataidx(%))
def $dataidx_instr(MEMORY.INIT x y) = y
def $dataidx_instr(DATA.DROP x) = x
def $dataidx_instr(in) = eps

def $dataidx_instrs(instr*) : dataidx*  hint(show $dataidx(%))
def $dataidx_instrs(eps) = eps
def $dataidx_instrs(instr instr'*) = $dataidx_instr(instr) $dataidx_instrs(instr'*)

def $dataidx_expr(expr) : dataidx*  hint(show $dataidx(%))
def $dataidx_expr(in*) = $dataidx_instrs(in*)

def $dataidx_func(func) : dataidx*  hint(show $dataidx(%))
def $dataidx_func(FUNC x loc* e) = $dataidx_expr(e)

def $dataidx_funcs(func*) : dataidx*  hint(show $dataidx(%))
def $dataidx_funcs(eps) = eps
def $dataidx_funcs(func func'*) = $dataidx_func(func) $dataidx_funcs(func'*)


;;
;; Auxiliary definitions on Types
;;

;; Size

;; def |I n| = |F n| = |V n| = n        ;; ????

;;def $size(numtype) : nat       hint(show |%|)
;;def $vsize(vegtype) : nat      hint(show |%|)
;;def $psize(packtype) : nat     hint(show |%|)
;;def $lsize(lanetype) : nat     hint(show |%|)
;;def $zsize(storagetype) : nat  hint(show |%|) hint(partial)

def $size(I32) = 32
def $size(I64) = 64
def $size(F32) = 32
def $size(F64) = 64

def $isize(Inn) = $size(Inn)

def $vsize(V128) = 128

def $psize(I8) = 8
def $psize(I16) = 16

def $lsize(numtype) = $size(numtype)
def $lsize(packtype) = $psize(packtype)

def $zsize(numtype) = $size(numtype)
def $zsize(vectype) = $vsize(vectype)
def $zsize(packtype) = $psize(packtype)

def $IN(N) : numtype  hint(show I#%) hint(macro "numtype")
def $IN(32) = I32
def $IN(64) = I64

def $FN(N) : numtype  hint(show F#%) hint(macro "numtype")
def $FN(32) = F32
def $FN(64) = F64


;; Unpacking

def $lunpack(lanetype) : numtype  hint(show $unpack(%))
def $lunpack(numtype) = numtype
def $lunpack(packtype) = I32

def $unpack(storagetype) : valtype
def $unpack(valtype) = valtype
def $unpack(packtype) = I32

def $nunpack(storagetype) : numtype  hint(show $unpack(%)) hint(partial)
def $nunpack(numtype) = numtype
def $nunpack(packtype) = I32

def $vunpack(storagetype) : vectype  hint(show $unpack(%)) hint(partial)
def $vunpack(vectype) = vectype

def $cunpack(storagetype) : consttype hint(show $unpack(%)) hint(partial)
def $cunpack(consttype) = consttype
def $cunpack(packtype) = I32
def $cunpack(lanetype) = $lunpack(lanetype)  ;; HACK

def $sx(storagetype) : sx?  hint(show $sx(%))
def $sx(consttype) = eps
def $sx(packtype) = S


;; Const

def $const(consttype, lit_(consttype)): instr  hint(show %.CONST %)
def $const(numtype, c) = (CONST numtype c)
def $const(vectype, c) = (VCONST vectype c)


;; Shapes

;;def $lanetype(shape) : lanetype
def $lanetype(Lnn X N) = Lnn

;;def $dim(shape) : nat
def $dim(Lnn X N) = N

;;def $shsize(shape) : nat
def $shsize(Lnn X N) = $($lsize(Lnn) * N)

def $unpackshape(shape) : numtype  hint(show $unpack(%))
def $unpackshape(Lnn X N) = $lunpack(Lnn)


;; Type difference

def $diffrt(reftype, reftype) : reftype  hint(show %\%)

def $diffrt((REF nul1 ht_1), (REF NULL ht_2)) = (REF ht_1)
def $diffrt((REF nul1 ht_1), (REF ht_2)) = (REF nul1 ht_1)


;; Injection

syntax typevar = _IDX typeidx | REC nat
var tv : typevar
var yy : typeuse hint(show y)
var tu : typeuse

def $idx(typeidx) : typevar  hint(show %)
def $idx(x) = _IDX x


;; Substitution

def $subst_typevar(typevar, typevar*, typeuse*) : typeuse             hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_typeuse(typeuse, typevar*, typeuse*) : typeuse             hint(show %#`[%:=%]) hint(macro "%subst")

def $subst_numtype(numtype, typevar*, typeuse*) : numtype             hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_vectype(vectype, typevar*, typeuse*) : vectype             hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_heaptype(heaptype, typevar*, typeuse*) : heaptype          hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_reftype(reftype, typevar*, typeuse*) : reftype             hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_valtype(valtype, typevar*, typeuse*) : valtype             hint(show %#`[%:=%]) hint(macro "%subst")

def $subst_packtype(packtype, typevar*, typeuse*) : packtype          hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_storagetype(storagetype, typevar*, typeuse*) : storagetype hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_fieldtype(fieldtype, typevar*, typeuse*) : fieldtype       hint(show %#`[%:=%]) hint(macro "%subst")

def $subst_comptype(comptype, typevar*, typeuse*) : comptype          hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_subtype(subtype, typevar*, typeuse*) : subtype             hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_rectype(rectype, typevar*, typeuse*) : rectype             hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_deftype(deftype, typevar*, typeuse*) : deftype             hint(show %#`[%:=%]) hint(macro "%subst")

def $subst_globaltype(globaltype, typevar*, typeuse*) : globaltype    hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_functype(functype, typevar*, typeuse*) : functype          hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_tabletype(tabletype, typevar*, typeuse*) : tabletype       hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_memtype(memtype, typevar*, typeuse*) : memtype             hint(show %#`[%:=%]) hint(macro "%subst")

def $subst_externtype(externtype, typevar*, typeuse*) : externtype    hint(show %#`[%:=%]) hint(macro "%subst")
def $subst_moduletype(moduletype, typevar*, typeuse*) : moduletype    hint(show %#`[%:=%]) hint(macro "%subst")


def $subst_typevar(tv, eps, eps) = tv
def $subst_typevar(tv, tv_1 tv'*, tu_1 tu'*) = tu_1                            -- if tv = tv_1
def $subst_typevar(tv, tv_1 tv'*, tu_1 tu'*) = $subst_typevar(tv, tv'*, tu'*)  -- otherwise

def $subst_typeuse(tv', tv*, tu*) = $subst_typevar(tv', tv*, tu*)
def $subst_typeuse(dt, tv*, tu*) = $subst_deftype(dt, tv*, tu*)

def $subst_numtype(nt, tv*, tu*) = nt
def $subst_vectype(vt, tv*, tu*) = vt

def $subst_heaptype(tv', tv*, tu*) = $subst_typevar(tv', tv*, tu*)
def $subst_heaptype(dt, tv*, tu*) = $subst_deftype(dt, tv*, tu*)
def $subst_heaptype(ht, tv*, tu*) = ht  -- otherwise

def $subst_reftype((REF nul ht), tv*, tu*) = REF nul $subst_heaptype(ht, tv*, tu*)

def $subst_valtype(nt, tv*, tu*) = $subst_numtype(nt, tv*, tu*)
def $subst_valtype(vt, tv*, tu*) = $subst_vectype(vt, tv*, tu*)
def $subst_valtype(rt, tv*, tu*) = $subst_reftype(rt, tv*, tu*)
def $subst_valtype(BOT, tv*, tu*) = BOT

def $subst_packtype(pt, tv*, tu*) = pt

def $subst_storagetype(t, tv*, tu*) = $subst_valtype(t, tv*, tu*)
def $subst_storagetype(pt, tv*, tu*) = $subst_packtype(pt, tv*, tu*)

def $subst_fieldtype((mut zt), tv*, tu*) = mut $subst_storagetype(zt, tv*, tu*)

def $subst_comptype((STRUCT yt*), tv*, tu*) = STRUCT $subst_fieldtype(yt, tv*, tu*)*
def $subst_comptype((ARRAY yt), tv*, tu*) = ARRAY $subst_fieldtype(yt, tv*, tu*)
def $subst_comptype((FUNC ft), tv*, tu*) = FUNC $subst_functype(ft, tv*, tu*)

def $subst_subtype((SUB fin tu'* ct), tv*, tu*) =
  SUB fin $subst_typeuse(tu', tv*, tu*)* $subst_comptype(ct, tv*, tu*)

def $subst_rectype((REC st*), tv*, tu*) = REC $subst_subtype(st, tv*, tu*)*

def $subst_deftype((DEF qt i), tv*, tu*) = DEF $subst_rectype(qt, tv*, tu*) i

def $subst_globaltype((mut t), tv*, tu*) = mut $subst_valtype(t, tv*, tu*)
def $subst_functype((t_1* -> t_2*), tv*, tu*) = $subst_valtype(t_1, tv*, tu*)* -> $subst_valtype(t_2, tv*, tu*)*
def $subst_memtype((lim PAGE), tv*, tu*) = lim PAGE
def $subst_tabletype((lim rt), tv*, tu*) = lim $subst_reftype(rt, tv*, tu*)

def $subst_externtype((FUNC dt), tv*, tu*) = FUNC $subst_deftype(dt, tv*, tu*)
def $subst_externtype((GLOBAL gt), tv*, tu*) = GLOBAL $subst_globaltype(gt, tv*, tu*)
def $subst_externtype((TABLE tt), tv*, tu*) = TABLE $subst_tabletype(tt, tv*, tu*)
def $subst_externtype((MEM mt), tv*, tu*) = MEM $subst_memtype(mt, tv*, tu*)

def $subst_moduletype(xt_1* -> xt_2*, tv*, tu*) = $subst_externtype(xt_1, tv*, tu*)* -> $subst_externtype(xt_2, tv*, tu*)*


def $subst_all_valtype(valtype, heaptype*) : valtype  hint(show %#`[:=%]) hint(macro "%subst")
def $subst_all_reftype(reftype, heaptype*) : reftype  hint(show %#`[:=%]) hint(macro "%subst")
def $subst_all_deftype(deftype, heaptype*) : deftype  hint(show %#`[:=%]) hint(macro "%subst")
def $subst_all_moduletype(moduletype, heaptype*) : moduletype  hint(show %#`[:=%]) hint(macro "%subst")

def $subst_all_valtype(t, tu^n) = $subst_valtype(t, $idx(i)^(i<n), tu^n)
def $subst_all_reftype(rt, tu^n) = $subst_reftype(rt, $idx(i)^(i<n), tu^n)
def $subst_all_deftype(dt, tu^n) = $subst_deftype(dt, $idx(i)^(i<n), tu^n)
def $subst_all_moduletype(mmt, tu^n) = $subst_moduletype(mmt, $idx(i)^(i<n), tu^n)

def $subst_all_deftypes(deftype*, heaptype*) : deftype*  hint(show %#`[:=%]) hint(macro "%subst")
def $subst_all_deftypes(eps, tu*) = eps
def $subst_all_deftypes(dt_1 dt*, tu*) = $subst_all_deftype(dt_1, tu*) $subst_all_deftypes(dt*, tu*)


;; Rolling and Unrolling

def $rollrt(typeidx, rectype) : rectype  hint(show $roll_(%, %))   hint(macro "rollrt")
def $unrollrt(rectype) : rectype         hint(show $unroll(%))     hint(macro "unrollrt")
def $rolldt(typeidx, rectype) : deftype* hint(show $roll_(%)*#((%))) hint(macro "rolldt")
def $unrolldt(deftype) : subtype         hint(show $unroll(%))     hint(macro "unrolldt")
def $expanddt(deftype) : comptype        hint(show $expand(%))     hint(macro "expanddt")

;; TODO: in general, multi-dimensional use of dimensioned vars is ambiguous;
;; for example, x** with dimension x* could be x1 x2 x1 x2 of x1 x1 x2 x2.
;; For now, we avoid to reuse the dimension var in exact same form
def $rollrt(x, rectype) = REC ($subst_subtype(subtype, ($idx($(x + i)))^(i<n), (REC i)^(i<n)))^n
  -- if rectype = REC subtype^n
def $unrollrt(rectype) = REC ($subst_subtype(subtype, (REC i)^(i<n), (DEF rectype i)^(i<n)))^n
  -- if rectype = REC subtype^n

def $rolldt(x, rectype) = (DEF (REC subtype^n) i)^(i<n)  -- if $rollrt(x, rectype) = REC subtype^n
def $unrolldt(DEF rectype i) = subtype*[i]               -- if $unrollrt(rectype) = REC subtype*

def $expanddt(deftype) = comptype              -- if $unrolldt(deftype) = SUB fin typeuse* comptype

relation Expand: deftype ~~ comptype hint(macro "%expanddt")
rule Expand: deftype ~~ comptype               -- if $unrolldt(deftype) = SUB fin typeuse* comptype


;; Projections

;; TODO: use built-in notation

def $funcsxx(externidx*) : typeidx*      hint(show $funcs(%))   hint(macro "funcsxx")
def $globalsxx(externidx*) : globalidx*  hint(show $globals(%)) hint(macro "globalsxx")
def $tablesxx(externidx*) : tableidx*    hint(show $tables(%))  hint(macro "tablesxx")
def $memsxx(externidx*) : memidx*        hint(show $mems(%))    hint(macro "memsxx")

def $funcsxx(eps) = eps
def $funcsxx((FUNC x) xx*) = x $funcsxx(xx*)
def $funcsxx(externidx xx*) = $funcsxx(xx*)  -- otherwise

def $globalsxx(eps) = eps
def $globalsxx((GLOBAL x) xx*) = x $globalsxx(xx*)
def $globalsxx(externidx xx*) = $globalsxx(xx*)  -- otherwise

def $tablesxx(eps) = eps
def $tablesxx((TABLE x) xx*) = x $tablesxx(xx*)
def $tablesxx(externidx xx*) = $tablesxx(xx*)  -- otherwise

def $memsxx(eps) = eps
def $memsxx((MEM x) xx*) = x $memsxx(xx*)
def $memsxx(externidx xx*) = $memsxx(xx*)  -- otherwise


def $funcsxt(externtype*) : deftype*       hint(show $funcs(%))   hint(macro "funcsxt")
def $globalsxt(externtype*) : globaltype*  hint(show $globals(%)) hint(macro "globalsxt")
def $tablesxt(externtype*) : tabletype*    hint(show $tables(%))  hint(macro "tablesxt")
def $memsxt(externtype*) : memtype*        hint(show $mems(%))    hint(macro "memsxt")

def $funcsxt(eps) = eps
def $funcsxt((FUNC dt) xt*) = dt $funcsxt(xt*)
def $funcsxt(externtype xt*) = $funcsxt(xt*)  -- otherwise

def $globalsxt(eps) = eps
def $globalsxt((GLOBAL gt) xt*) = gt $globalsxt(xt*)
def $globalsxt(externtype xt*) = $globalsxt(xt*)  -- otherwise

def $tablesxt(eps) = eps
def $tablesxt((TABLE tt) xt*) = tt $tablesxt(xt*)
def $tablesxt(externtype xt*) = $tablesxt(xt*)  -- otherwise

def $memsxt(eps) = eps
def $memsxt((MEM mt) xt*) = mt $memsxt(xt*)
def $memsxt(externtype xt*) = $memsxt(xt*)  -- otherwise



;;
;; Auxiliary definitions on Instructions
;;

;; Shorthands for Instructions

def $memarg0 : memarg  hint(show )
def $memarg0 = {ALIGN 0, OFFSET 0}
