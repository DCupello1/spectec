;;
;; Numerics
;;

;; Conversions

def $s33_to_u32(s33) : u32  hint(show %)


;; Signed numbers

def $signed(N, nat) : int       hint(show $signed_(%,%))
def $signed(N, i) = i           -- if $(0 <= 2^(N-1))
def $signed(N, i) = $(i - 2^N)  -- if $(2^(N-1) <= i < 2^N)

def $invsigned(N, int) : nat    hint(show $signed_(%)^(-1)#((%)))
def $invsigned(N, i) = j        -- if $signed(N, j) = i


;; TODO

def $unop(numtype, unop_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#$_(%1)#((%3)))
def $binop(numtype, binop_(numtype), num_(numtype), num_(numtype)) : num_(numtype)*
    hint(show %2#$_(%1)#(%3, %4))
def $testop(numtype, testop_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#$_(%1)#((%3)))
def $relop(numtype, relop_(numtype), num_(numtype), num_(numtype)) : num_(I32)
    hint(show %2#$_(%1)#(%3, %4))
def $cvtop(numtype_1, numtype_2, cvtop, sx?, num_(numtype_1)) : num_(numtype_2)*
    hint(show %3#$_((%1,%2))^(%4)#((%5)))

def $wrap(M, N, iN(M)) : iN(N)                      hint(show $wrap_((%,%))#((%)))
def $ext(M, N, sx, iN(M)) : iN(N)                   hint(show $ext_((%,%))^(%)#((%)))
def $trunc(M, N, sx, fN(M)) : iN(N)                 hint(show $trunc_((%,%))^(%)#((%)))
def $trunc_sat(M, N, sx, fN(M)) : iN(N)             hint(show $trunc_sat_((%,%))^(%)#((%)))
def $demote(M, N, fN(M)) : fN(N)                    hint(show $demote_((%,%))#((%)))
def $promote(M, N, fN(M)) : fN(N)                   hint(show $promote_((%,%))#((%)))
def $convert(M, N, sx, iN(M)) : fN(N)               hint(show $convert_((%,%))^(%)#((%)))
def $narrow(M, N, sx, iN(M)) : iN(N)                hint(show $narrow_((%,%))^(%)#(%))
def $reinterpret(numtype_1, numtype_2, num_(numtype_1)) : num_(numtype_2)
    hint(show $narrow_((%,%))#(%))

def $ibits(N, iN(N)) : bit*                         hint(show $bits_(I#%,%))
def $fbits(N, fN(N)) : bit*                         hint(show $bits_(F#%,%))
def $ibytes(N, iN(N)) : byte*                       hint(show $bytes_(I#%,%))
def $fbytes(N, fN(N)) : byte*                       hint(show $bytes_(F#%,%))
def $nbytes(numtype, num_(numtype)) : byte*         hint(show $bytes_(%,%))
def $vbytes(vectype, vec_(vectype)) : byte*         hint(show $bytes_(%,%))


def $invibytes(N, byte*) : iN(N)
def $invfbytes(N, byte*) : fN(N)

def $invibytes(N, b*) = n  -- if $ibytes(N, n) = b*
def $invfbytes(N, b*) = p  -- if $fbytes(N, p) = b*


def $iadd(N, iN(N), iN(N)) : iN(N)      hint(show $iadd_(%,%,%))
def $isub(N, iN(N), iN(N)) : iN(N)      hint(show $isub_(%,%,%))
def $imul(N, iN(N), iN(N)) : iN(N)      hint(show $imul_(%,%,%))
def $idiv(N, sx, iN(N), iN(N)) : iN(N)  hint(show $idiv_(%)^(%)#((%,%)))
def $irem(N, sx, iN(N), iN(N)) : iN(N)  hint(show $irem_(%)^(%)#((%,%)))
def $inot(N, iN(N)) : iN(N)             hint(show $inot_(%,%))
def $iand(N, iN(N), iN(N)) : iN(N)      hint(show $iand_(%,%,%))
def $iandnot(N, iN(N), iN(N)) : iN(N)   hint(show $inot_(%,%,%))
def $ior(N, iN(N), iN(N)) : iN(N)       hint(show $ior_(%,%,%))
def $ixor(N, iN(N), iN(N)) : iN(N)      hint(show $ixor_(%,%,%))
def $ishl(N, iN(N), u32) : iN(N)        hint(show $ishl_(%,%,%))
def $ishr(N, sx, iN(N), u32) : iN(N)    hint(show $ishr_(%)^(%)#((%,%)))
def $irotl(N, iN(N), iN(N)) : iN(N)     hint(show $irotl_(%,%,%))
def $irotr(N, iN(N), iN(N)) : iN(N)     hint(show $irotr_(%,%,%))
def $iclz(N, iN(N)) : iN(N)             hint(show $iclz_(%,%))
def $ictz(N, iN(N)) : iN(N)             hint(show $iclz_(%,%))
def $ipopcnt(N, iN(N)) : iN(N)          hint(show $ipopcnt_(%,%))
def $ieqz(N, iN(N)) : u32               hint(show $ieqz_(%,%))
def $ieq(N, iN(N), iN(N)) : u32         hint(show $ieq_(%,%,%))
def $ine(N, iN(N), iN(N)) : u32         hint(show $ine_(%,%,%))
def $ilt(N, sx, iN(N), iN(N)) : u32     hint(show $ilt_(%)^(%)#((%,%)))
def $igt(N, sx, iN(N), iN(N)) : u32     hint(show $igt_(%)^(%)#((%,%)))
def $ile(N, sx, iN(N), iN(N)) : u32     hint(show $ile_(%)^(%)#((%,%)))
def $ige(N, sx, iN(N), iN(N)) : u32     hint(show $ige_(%)^(%)#((%,%)))
def $ibitselect(N, iN(N), iN(N), iN(N)) : iN(N)
    hint(show $ibitselect_(%,%,%,%))
def $iabs(N, iN(N)) : iN(N)             hint(show $iabs_(%,%))
def $ineg(N, iN(N)) : iN(N)             hint(show $ineg_(%,%))
def $imin(N, sx, iN(N), iN(N)) : iN(N)  hint(show $imin_(%)^(%)%((%,%)))
def $imax(N, sx, iN(N), iN(N)) : iN(N)  hint(show $imax_(%)^(%)%((%,%)))
def $iaddsat(N, sx, iN(N), iN(N)) : iN(N)  hint(show $iaddsat_(%)^(%)#((%,%)))
def $isubsat(N, sx, iN(N), iN(N)) : iN(N)  hint(show $isubsat_(%)^(%)#((%,%)))
def $iavgr_u(N, iN(N), iN(N)) : iN(N)   hint(show $iavgr_u_(%,%,%))
def $iq15mulrsat_s(N, iN(N), iN(N)) : iN(N) hint(show $iq15mulrsat_s_(%,%,%))

def $fadd(N, fN(N), fN(N)) : fN(N)      hint(show $fadd_(%,%,%))
def $fsub(N, fN(N), fN(N)) : fN(N)      hint(show $fsub_(%,%,%))
def $fmul(N, fN(N), fN(N)) : fN(N)      hint(show $fmul_(%,%,%))
def $fdiv(N, fN(N), fN(N)) : fN(N)      hint(show $fdiv_(%,%,%))
def $fmin(N, fN(N), fN(N)) : fN(N)      hint(show $fmin_(%,%,%))
def $fmax(N, fN(N), fN(N)) : fN(N)      hint(show $fmax_(%,%,%))
def $fcopysign(N, fN(N), fN(N)) : fN(N) hint(show $fcopysign_(%,%,%))
def $fabs(N, fN(N)) : fN(N)             hint(show $fabs_(%,%))
def $fneg(N, fN(N)) : fN(N)             hint(show $fneg_(%,%))
def $fsqrt(N, fN(N)) : fN(N)            hint(show $fsqrt_(%,%))
def $fceil(N, fN(N)) : fN(N)            hint(show $fceil_(%,%))
def $ffloor(N, fN(N)) : fN(N)           hint(show $ffloor_(%,%))
def $ftrunc(N, fN(N)) : fN(N)           hint(show $ftrunc_(%,%))
def $fnearest(N, fN(N)) : fN(N)         hint(show $fnearest_(%,%))
def $feq(N, fN(N), fN(N)) : u32         hint(show $feq_(%,%,%))
def $fne(N, fN(N), fN(N)) : u32         hint(show $fne_(%,%,%))
def $flt(N, fN(N), fN(N)) : u32         hint(show $flt_(%,%,%))
def $fgt(N, fN(N), fN(N)) : u32         hint(show $fgt_(%,%,%))
def $fle(N, fN(N), fN(N)) : u32         hint(show $fle_(%,%,%))
def $fge(N, fN(N), fN(N)) : u32         hint(show $fge_(%,%,%))
def $fpmin(N, fN(N), fN(N)) : fN(N)     hint(show $fpmin_(%,%,%))
def $fpmax(N, fN(N), fN(N)) : fN(N)     hint(show $fpmax_(%,%,%))


def $binop(Inn, ADD, iN_1, iN_2) = $iadd($size(Inn), iN_1, iN_2)
def $binop(Inn, SUB, iN_1, iN_2) = $isub($size(Inn), iN_1, iN_2)
def $binop(Inn, MUL, iN_1, iN_2) = $imul($size(Inn), iN_1, iN_2)
def $binop(Inn, DIV sx, iN_1, iN_2) = $idiv($size(Inn), sx, iN_1, iN_2)
def $binop(Inn, REM sx, iN_1, iN_2) = $irem($size(Inn), sx, iN_1, iN_2)
def $binop(Inn, AND, iN_1, iN_2) = $iand($size(Inn), iN_1, iN_2)
def $binop(Inn, OR, iN_1, iN_2) = $ior($size(Inn), iN_1, iN_2)
def $binop(Inn, XOR, iN_1, iN_2) = $ixor($size(Inn), iN_1, iN_2)
def $binop(Inn, SHL, iN_1, iN_2) = $ishl($size(Inn), iN_1, iN_2)
def $binop(Inn, SHR sx, iN_1, iN_2) = $ishr($size(Inn), sx, iN_1, iN_2)
def $binop(Inn, ROTL, iN_1, iN_2) = $irotl($size(Inn), iN_1, iN_2)
def $binop(Inn, ROTR, iN_1, iN_2) = $irotr($size(Inn), iN_1, iN_2)
def $unop(Inn, CLZ, iN) = $iclz($size(Inn), iN)
def $unop(Inn, CTZ, iN) = $ictz($size(Inn), iN)
def $unop(Inn, POPCNT, iN) = $ipopcnt($size(Inn), iN)
def $unop(Inn, EXTEND N, iN) = $ext(N, $size(Inn), S, $wrap($size(Inn), N, iN))
def $testop(Inn, EQZ, iN) = $ieqz($size(Inn), iN)
def $relop(Inn, EQ, iN_1, iN_2) = $ieq($size(Inn), iN_1, iN_2)
def $relop(Inn, NE, iN_1, iN_2) = $ine($size(Inn), iN_1, iN_2)
def $relop(Inn, LT sx, iN_1, iN_2) = $ilt($size(Inn), sx, iN_1, iN_2)
def $relop(Inn, GT sx, iN_1, iN_2) = $igt($size(Inn), sx, iN_1, iN_2)
def $relop(Inn, LE sx, iN_1, iN_2) = $ile($size(Inn), sx, iN_1, iN_2)
def $relop(Inn, GE sx, iN_1, iN_2) = $ige($size(Inn), sx, iN_1, iN_2)

def $binop(Fnn, ADD, fN_1, fN_2) = $fadd($size(Fnn), fN_1, fN_2)
def $binop(Fnn, SUB, fN_1, fN_2) = $fsub($size(Fnn), fN_1, fN_2)
def $binop(Fnn, MUL, fN_1, fN_2) = $fmul($size(Fnn), fN_1, fN_2)
def $binop(Fnn, DIV, fN_1, fN_2) = $fdiv($size(Fnn), fN_1, fN_2)
def $binop(Fnn, MIN, fN_1, fN_2) = $fmin($size(Fnn), fN_1, fN_2)
def $binop(Fnn, MAX, fN_1, fN_2) = $fmax($size(Fnn), fN_1, fN_2)
def $binop(Fnn, COPYSIGN, fN_1, fN_2) = $fcopysign($size(Fnn), fN_1, fN_2)

def $unop(Fnn, ABS, fN) = $fabs($size(Fnn), fN)
def $unop(Fnn, NEG, fN) = $fneg($size(Fnn), fN)
def $unop(Fnn, SQRT, fN) = $fsqrt($size(Fnn), fN)
def $unop(Fnn, CEIL, fN) = $fceil($size(Fnn), fN)
def $unop(Fnn, FLOOR, fN) = $ffloor($size(Fnn), fN)
def $unop(Fnn, TRUNC, fN) = $ftrunc($size(Fnn), fN)
def $unop(Fnn, NEAREST, fN) = $fnearest($size(Fnn), fN)

def $relop(Fnn, EQ, fN_1, fN_2) = $feq($size(Fnn), fN_1, fN_2)
def $relop(Fnn, NE, fN_1, fN_2) = $fne($size(Fnn), fN_1, fN_2)
def $relop(Fnn, LT, fN_1, fN_2) = $flt($size(Fnn), fN_1, fN_2)
def $relop(Fnn, GT, fN_1, fN_2) = $fgt($size(Fnn), fN_1, fN_2)
def $relop(Fnn, LE, fN_1, fN_2) = $fle($size(Fnn), fN_1, fN_2)
def $relop(Fnn, GE, fN_1, fN_2) = $fge($size(Fnn), fN_1, fN_2)

def $cvtop(I32, I64, CONVERT, sx, iN) = $ext(32, 64, sx, iN)
def $cvtop(I64, I32, CONVERT, sx?, iN) = $wrap(64, 32, iN)
def $cvtop(Fnn, Inn, CONVERT, sx, fN) = $trunc($size(Fnn), $size(Inn), sx, fN)
def $cvtop(Fnn, Inn, CONVERT_SAT, sx, fN) = $trunc_sat($size(Fnn), $size(Inn), sx, fN)
def $cvtop(F32, F64, CONVERT, sx?, fN) = $promote(32, 64, fN)
def $cvtop(F64, F32, CONVERT, sx?, fN) = $demote(64, 32, fN)
def $cvtop(Inn, Fnn, CONVERT, sx, iN) = $convert($size(Inn), $size(Fnn), sx, iN)
def $cvtop(Inn, Fnn, CONVERT, sx?, iN) = $reinterpret(Inn, Fnn, iN) -- if $size(Inn) = $size(Fnn)
def $cvtop(Fnn, Inn, CONVERT, sx?, fN) = $reinterpret(Fnn, Inn, fN) -- if $size(Inn) = $size(Fnn)


;; Packed values

def $packnum(lanetype, num_($unpack(lanetype))) : lane_(lanetype)
    hint(show $pack_(%,%))
def $packnum(numtype, c) = c
def $packnum(packtype, c) = $wrap($size($unpack(packtype)), $psize(packtype), c)

def $unpacknum(lanetype, lane_(lanetype)) : num_($unpack(lanetype))
    hint(show $unpack_(%,%))
def $unpacknum(numtype, c) = c
def $unpacknum(packtype, c) = $ext($psize(packtype), $size($unpack(packtype)), U, c)


;; Vectors

def $lanes_(shape, vec_(V128)) : lane_($lanetype(shape))*
    hint(show $lanes_(%,%))

def $invlanes_(shape, lane_($lanetype(shape))*) : vec_(V128)
    hint(show $lanes^(-1)#_%#(%,%))
def $invlanes_(sh, c*) = vc  -- if c* = $lanes_(sh, vc)

def $halfop(half, nat, nat) : nat
def $halfop(LOW, i, j) = i
def $halfop(HIGH, i, j) = j

;; TODO: return lists for nondeterminism
def $vvunop(vectype, vvunop, vec_(vectype)) : vec_(vectype)
    hint(show %2#$_(%1)#((%3)))
def $vvbinop(vectype, vvbinop, vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#$_(%1)#(%3, %4))
def $vvternop(vectype, vvternop, vec_(vectype), vec_(vectype), vec_(vectype)) : vec_(vectype)
    hint(show %2#$_(%1)#(%3, %4, %5))

def $vvunop(V128, NOT, v128) = $inot($size(V128), v128)
def $vvbinop(V128, AND, v128_1, v128_2) = $iand($size(V128), v128_1, v128_2)
def $vvbinop(V128, ANDNOT, v128_1, v128_2) = $iandnot($size(V128), v128_1, v128_2)
def $vvbinop(V128, OR, v128_1, v128_2) = $ior($size(V128), v128_1, v128_2)
def $vvbinop(V128, XOR, v128_1, v128_2) = $ixor($size(V128), v128_1, v128_2)
def $vvternop(V128, BITSELECT, v128_1, v128_2, v128_3) = $ibitselect($size(V128), v128_1, v128_2, v128_3)

;; TODO: rename these to mapunop etc?
def $vunop(shape, vunop_(shape), vec_(V128)) : vec_(V128)
    hint(show %2#$_(%1)#((%3)))
def $vbinop(shape, vbinop_(shape), vec_(V128), vec_(V128)) : vec_(V128)*
    hint(show %2#$_(%1)#(%3, %4))
def $vrelop(shape, vrelop_(shape), vec_(V128), vec_(V128)) : vec_(V128)
    hint(show %2#$_(%1)#(%3, %4))
def $vcvtop(shape_1, shape_2, vcvtop, sx?, lane_($lanetype(shape_1))) : lane_($lanetype(shape_2))
    hint(show %3#$_((%1,%2))^(%5)#((%6)))

def $vunop(Jnn X N, ABS, v128_1) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if v128 = $invlanes_(Jnn X N, $iabs($lsize(Jnn), lane_1)*)
def $vunop(Jnn X N, NEG, v128_1) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if v128 = $invlanes_(Jnn X N, $ineg($lsize(Jnn), lane_1)*)
def $vunop(Jnn X N, POPCNT, v128_1) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if v128 = $invlanes_(Jnn X N, $ipopcnt($lsize(Jnn), lane_1)*)

def $vbinop(Jnn X N, ADD, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $iadd($lsize(Jnn), lane_1, lane_2)*)
def $vbinop(Jnn X N, SUB, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $isub($lsize(Jnn), lane_1, lane_2)*)
def $vbinop(Jnn X N, MIN sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $imin($lsize(Jnn), sx, lane_1, lane_2)*)
def $vbinop(Jnn X N, MAX sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $imax($lsize(Jnn), sx, lane_1, lane_2)*)
def $vbinop(Jnn X N, ADD_SAT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $iaddsat($lsize(Jnn), sx, lane_1, lane_2)*)
def $vbinop(Jnn X N, SUB_SAT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $isubsat($lsize(Jnn), sx, lane_1, lane_2)*)
def $vbinop(Jnn X N, MUL, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $imul($lsize(Jnn), lane_1, lane_2)*)
def $vbinop(Jnn X N, AVGR_U, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $iavgr_u($lsize(Jnn), lane_1, lane_2)*)
def $vbinop(Jnn X N, Q15MULR_SAT_S, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if v128 = $invlanes_(Jnn X N, $iq15mulrsat_s($lsize(Jnn), lane_1, lane_2)*)

def $vrelop(Jnn X N, EQ, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(Jnn), S, $ieq($lsize(Jnn), lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop(Jnn X N, NE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(Jnn), S, $ine($lsize(Jnn), lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop(Jnn X N, LT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(Jnn), S, $ilt($lsize(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop(Jnn X N, GT sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(Jnn), S, $igt($lsize(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop(Jnn X N, LE sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(Jnn), S, $ile($lsize(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)
def $vrelop(Jnn X N, GE sx, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Jnn X N, v128_1)
    -- if lane_2* = $lanes_(Jnn X N, v128_2)
    -- if lane_3* = $ext(1, $lsize(Jnn), S, $ige($lsize(Jnn), sx, lane_1, lane_2))*
    -- if v128 = $invlanes_(Jnn X N, lane_3*)

def $vunop(Fnn X N, ABS, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fabs($size(Fnn), lane_1)*)
def $vunop(Fnn X N, NEG, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fneg($size(Fnn), lane_1)*)
def $vunop(Fnn X N, SQRT, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fsqrt($size(Fnn), lane_1)*)
def $vunop(Fnn X N, CEIL, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fceil($size(Fnn), lane_1)*)
def $vunop(Fnn X N, FLOOR, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $ffloor($size(Fnn), lane_1)*)
def $vunop(Fnn X N, TRUNC, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $ftrunc($size(Fnn), lane_1)*)
def $vunop(Fnn X N, NEAREST, v128_1) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if v128 = $invlanes_(Fnn X N, $fnearest($size(Fnn), lane_1)*)

def $vbinop(Fnn X N, ADD, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fadd($size(Fnn), lane_1, lane_2)*)
def $vbinop(Fnn X N, SUB, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fsub($size(Fnn), lane_1, lane_2)*)
def $vbinop(Fnn X N, MUL, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fmul($size(Fnn), lane_1, lane_2)*)
def $vbinop(Fnn X N, DIV, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fdiv($size(Fnn), lane_1, lane_2)*)
def $vbinop(Fnn X N, MIN, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fmin($size(Fnn), lane_1, lane_2)*)
def $vbinop(Fnn X N, MAX, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fmax($size(Fnn), lane_1, lane_2)*)
def $vbinop(Fnn X N, PMIN, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fpmin($size(Fnn), lane_1, lane_2)*)
def $vbinop(Fnn X N, PMAX, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if v128 = $invlanes_(Fnn X N, $fpmax($size(Fnn), lane_1, lane_2)*)

def $vrelop(Fnn X N, EQ, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $ext(1, $size(Fnn), S, $feq($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop(Fnn X N, NE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $ext(1, $size(Fnn), S, $fne($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop(Fnn X N, LT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $ext(1, $size(Fnn), S, $flt($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop(Fnn X N, GT, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $ext(1, $size(Fnn), S, $fgt($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop(Fnn X N, LE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $ext(1, $size(Fnn), S, $fle($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)
def $vrelop(Fnn X N, GE, v128_1, v128_2) = v128
    -- if lane_1* = $lanes_(Fnn X N, v128_1)
    -- if lane_2* = $lanes_(Fnn X N, v128_2)
    -- if lane_3* = $ext(1, $size(Fnn), S, $fge($size(Fnn), lane_1, lane_2))*
    -- if $isize(Inn) = $size(Fnn)
    -- if v128 = $invlanes_(Inn X N, lane_3*)

def $vcvtop(I8 X N_1, I16 X N_2, EXTEND, sx, i8) = i16
    -- if i16 = $ext(8, 16, sx, i8)
def $vcvtop(I16 X N_1, I32 X N_2, EXTEND, sx, i16) = i32
    -- if i32 = $ext(16, 32, sx, i16)
def $vcvtop(I32 X N_1, I64 X N_2, EXTEND, sx, i32) = i64
    -- if i64 = $ext(32, 64, sx, i32)
def $vcvtop(I32 X N_1, F32 X N_2, CONVERT, sx, i32) = f32
    -- if f32 = $convert(32, 32, sx, i32)
def $vcvtop(I32 X N_1, F64 X N_2, CONVERT, sx, i32) = f64
    -- if f64 = $convert(32, 64, sx, i32)
def $vcvtop(F32 X N_1, I32 X N_2, TRUNC_SAT, sx, f32) = i32
    -- if i32 = $trunc_sat(32, 32, sx, f32)
def $vcvtop(F64 X N_1, I32 X N_2, TRUNC_SAT, sx, f64) = i32
    -- if i32 = $trunc_sat(64, 32, sx, f64)
def $vcvtop(F64 X N_1, F32 X N_2, DEMOTE, sx?, f64) = f32
    -- if f32 = $demote(64, 32, f64)
def $vcvtop(F32 X N_1, F64 X N_2, PROMOTE, sx?, f32) = f64
    -- if f64 = $promote(32, 64, f32)

def $vextunop(ishape_1, ishape_2, vextunop_(ishape_1), sx, vec_(V128)) : vec_(V128)
    hint(show %3#$_((%1,%2))^(%5)#((%6)))
def $vextbinop(ishape_1, ishape_2, vextbinop_(ishape_1), sx, vec_(V128), vec_(V128)) : vec_(V128)
    hint(show %3#$_((%1,%2))^(%5)#((%6,%7)))

def $vextunop(Inn_1 X N_1, Inn_2 X N_2, EXTADD_PAIRWISE, sx, c_1) = c
  -- var cj_1 : iN($lsize(Inn_1))
  -- var cj_2 : iN($lsize(Inn_1))
  -- if ci* = $lanes_(Inn_2 X N_2, c_1)
  -- if $concat_(iN($lsize(Inn_1)), (cj_1 cj_2)*) = $ext($lsize(Inn_2), $lsize(Inn_1), sx, ci)*
  -- if c = $invlanes_(Inn_1 X N_1, $iadd($lsize(Inn_1), cj_1, cj_2)*)

def $vextbinop(Inn_1 X N_1, Inn_2 X N_2, EXTMUL hf, sx, c_1, c_2) = c
  -- if ci_1* = $lanes_(Inn_2 X N_2, c_1)[$halfop(hf, 0, N_1) : N_1]
  -- if ci_2* = $lanes_(Inn_2 X N_2, c_2)[$halfop(hf, 0, N_1) : N_1]
  -- if c = $invlanes_(Inn_1 X N_1, $imul($lsize(Inn_1), $ext($lsize(Inn_2), $lsize(Inn_1), sx, ci_1), $ext($lsize(Inn_2), $lsize(Inn_1), sx, ci_2))*)

def $vextbinop(Inn_1 X N_1, Inn_2 X N_2, DOT, sx, c_1, c_2) = c
  -- var cj_1 : iN($lsize(Inn_1))
  -- var cj_2 : iN($lsize(Inn_1))
  -- if ci_1* = $lanes_(Inn_2 X N_2, c_1)
  -- if ci_2* = $lanes_(Inn_2 X N_2, c_2)
  -- if $concat_(iN($lsize(Inn_1)), (cj_1 cj_2)*) = $imul($lsize(Inn_1), $ext($lsize(Inn_2), $lsize(Inn_1), S, ci_1), $ext($lsize(Inn_2), $lsize(Inn_1), S, ci_2))*
  -- if c = $invlanes_(Inn_1 X N_1, $iadd($lsize(Inn_1), cj_1, cj_2)*)

;; TODO: refactor for consistency?
def $vshiftop(ishape, vshiftop_(ishape), lane_($lanetype(ishape)), u32) : lane_($lanetype(ishape))
    hint(show %2#_%1#(%3, %4))

def $vshiftop(Jnn X N, SHL, lane, n) = $ishl($lsize(Jnn), lane, n)
def $vshiftop(Jnn X N, SHR sx, lane, n) = $ishr($lsize(Jnn), sx, lane, n)
